import numpy as np
import pygame
import sys

# Définition des couleurs
Bleu = (0, 0, 255)
Noir = (0, 0, 0)
Rouge = (255, 0, 0)
Jaune = (255, 255, 0)
Blanc = (255, 255, 255)

# Définition des constantes du jeu
NB_LIGNES = 6  
NB_COLONNES = 7
DIMENSION_CASE = 100  
TAILLE_PION = int(DIMENSION_CASE / 2 - 5)  

# Dimensions de la fenêtre
largeur_fenetre = NB_COLONNES * DIMENSION_CASE
hauteur_fenetre = (NB_LIGNES + 1) * DIMENSION_CASE
dimensions = (largeur_fenetre, hauteur_fenetre)

# Fonction pour initialiser la grille de jeu
def initialiser_grille():
    return np.zeros((NB_LIGNES, NB_COLONNES))
# Déposer un jeton dans la grille
def deposer_jeton(grille, ligne, colonne, num_joueur):
    grille[ligne][colonne] = num_joueur

# Vérifier si une colonne est disponible
def colonne_disponible(grille, colonne):
    return grille[NB_LIGNES - 1][colonne] == 0

# Trouver la première ligne vide dans une colonne
def obtenir_ligne_disponible(grille, colonne):
    for ligne in range(NB_LIGNES):
        if grille[ligne][colonne] == 0:
            return ligne
    return None

# Afficher la grille dans la console (pour debug)
def afficher_grille_console(grille):
    print(np.flip(grille, 0))

def detecter_victoire(grille, jeton):
    # Vérification horizontale
    for col in range(NB_COLONNES - 3):
        for lig in range(NB_LIGNES):
            if (grille[lig][col] == jeton and 
                grille[lig][col+1] == jeton and 
                grille[lig][col+2] == jeton and 
                grille[lig][col+3] == jeton):
                return True

    # Vérification verticale
    for col in range(NB_COLONNES):
        for lig in range(NB_LIGNES - 3):
            if (grille[lig][col] == jeton and 
                grille[lig+1][col] == jeton and 
                grille[lig+2][col] == jeton and 
                grille[lig+3][col] == jeton):
                return True

    # Vérification diagonale de bas en haut
    for col in range(NB_COLONNES - 3):
        for lig in range(NB_LIGNES - 3):
            if (grille[lig][col] == jeton and 
                grille[lig+1][col+1] == jeton and 
                grille[lig+2][col+2] == jeton and 
                grille[lig+3][col+3] == jeton):
                return True

    # Vérification diagonale de haut en bas
    for col in range(NB_COLONNES - 3):
        for lig in range(3, NB_LIGNES):
            if (grille[lig][col] == jeton and 
                grille[lig-1][col+1] == jeton and 
                grille[lig-2][col+2] == jeton and 
                grille[lig-3][col+3] == jeton):
                return True
    
    return False
def afficher_grille_graphique(grille, surface):
    # Dessin du cadre de jeu
    for col in range(NB_COLONNES):
        for lig in range(NB_LIGNES):
            rect_x = col * DIMENSION_CASE
            rect_y = lig * DIMENSION_CASE + DIMENSION_CASE

            # Dessiner le rectangle bleu
            pygame.draw.rect(surface, Bleu, (rect_x, rect_y, DIMENSION_CASE, DIMENSION_CASE))
            
            # Dessiner le cercle noir (trou vide)
            centre_x = rect_x + DIMENSION_CASE // 2
            centre_y = rect_y + DIMENSION_CASE // 2
            pygame.draw.circle(surface, Noir, (centre_x, centre_y), TAILLE_PION)

    # Dessin des pions
    for col in range(NB_COLONNES):
        for lig in range(NB_LIGNES):
            centre_x = col * DIMENSION_CASE + DIMENSION_CASE // 2
            centre_y = hauteur_fenetre - (lig * DIMENSION_CASE + DIMENSION_CASE // 2)
            
            if grille[lig][col] == 1:  # Joueur 1 (Rouge)
                pygame.draw.circle(surface, Rouge, (centre_x, centre_y), TAILLE_PION)
            elif grille[lig][col] == 2:  # Joueur 2 (Jaune)
                pygame.draw.circle(surface, Jaune, (centre_x, centre_y), TAILLE_PION)

    pygame.display.update()

def demarrer_jeu():
    # Initialisation
    grille = initialiser_grille()
    fin_partie = False
    joueur_actuel = 0  # Joueur 1 commence

    # Configuration de Pygame
    pygame.init()
    ecran = pygame.display.set_mode(dimensions)
    pygame.display.set_caption('Puissance 4 TD-02')
    police_texte = pygame.font.SysFont("monospace", 75)

    afficher_grille_graphique(grille, ecran)

    # Boucle principale du jeu
    while not fin_partie:
        for evenement in pygame.event.get():
            if evenement.type == pygame.QUIT:
                sys.exit()

            # Gestion du survol de souris
            if evenement.type == pygame.MOUSEMOTION:
                pygame.draw.rect(ecran, Noir, (0, 0, largeur_fenetre, DIMENSION_CASE))
                position_x = evenement.pos[0]
                couleur_joueur = Rouge if joueur_actuel == 0 else Jaune
                pygame.draw.circle(ecran, couleur_joueur, (position_x, DIMENSION_CASE // 2), TAILLE_PION)
                pygame.display.update()

            # Gestion des clics
            if evenement.type == pygame.MOUSEBUTTONDOWN:
                colonne = evenement.pos[0] // DIMENSION_CASE
                if colonne_disponible(grille, colonne):
                    ligne = obtenir_ligne_disponible(grille, colonne)
                    num_joueur = joueur_actuel + 1
                    deposer_jeton(grille, ligne, colonne, num_joueur)

                    if detecter_victoire(grille, num_joueur):
                        message = "Le Rouge gagne!" if num_joueur == 1 else "Le Jaune gagne!"
                        couleur = Rouge if num_joueur == 1 else Jaune
                        texte = police_texte.render(message, 1, couleur)
                        ecran.blit(texte, (40, 10))
                        fin_partie = True

                    afficher_grille_console(grille)
                    afficher_grille_graphique(grille, ecran)
                    joueur_actuel = (joueur_actuel + 1) % 2

                if fin_partie:
                    pygame.time.wait(3000)
#Enregistrer une partie

def eng_partie(var):
pass

#Charger une partie

def charg_partie(var):
eng_partie()
pass

# Creer une IA avec l'algorithmme min/max 
def IA_diff():
pass



if __name__ == "__main__":
    demarrer_jeu()
