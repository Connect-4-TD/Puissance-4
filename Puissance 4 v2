import numpy as np
import pygame
import sys
import pickle
import random
import time

# Couleurs
Bleu = (0, 0, 255)
Noir = (0, 0, 0)
Rouge = (255, 0, 0)
Jaune = (255, 255, 0)
Blanc = (255, 255, 255)
Gris = (128, 128, 128)
Vert = (0, 200, 0)

# Configuration du jeu
NB_LIGNES = 6
NB_COLONNES = 7
DIMENSION_CASE = 100
TAILLE_PION = int(DIMENSION_CASE / 2 - 5)

largeur_fenetre = NB_COLONNES * DIMENSION_CASE
hauteur_fenetre = (NB_LIGNES + 1) * DIMENSION_CASE
dimensions = (largeur_fenetre, hauteur_fenetre)

def initialiser_grille():
    return np.zeros((NB_LIGNES, NB_COLONNES))

def deposer_jeton(grille, ligne, colonne, num_joueur):
    grille[ligne][colonne] = num_joueur

def colonne_disponible(grille, colonne):
    return grille[NB_LIGNES - 1][colonne] == 0

def obtenir_ligne_disponible(grille, colonne):
    for ligne in range(NB_LIGNES):
        if grille[ligne][colonne] == 0:
            return ligne
    return None

def afficher_grille_console(grille):
    print(np.flip(grille, 0))

def detecter_victoire(grille, jeton):
    # Vérification horizontale
    for col in range(NB_COLONNES - 3):
        for lig in range(NB_LIGNES):
            if (grille[lig][col] == jeton and 
                grille[lig][col+1] == jeton and 
                grille[lig][col+2] == jeton and 
                grille[lig][col+3] == jeton):
                return True

    # Vérification verticale
    for col in range(NB_COLONNES):
        for lig in range(NB_LIGNES - 3):
            if (grille[lig][col] == jeton and 
                grille[lig+1][col] == jeton and 
                grille[lig+2][col] == jeton and 
                grille[lig+3][col] == jeton):
                return True

    # Vérification diagonale ascendante
    for col in range(NB_COLONNES - 3):
        for lig in range(NB_LIGNES - 3):
            if (grille[lig][col] == jeton and 
                grille[lig+1][col+1] == jeton and 
                grille[lig+2][col+2] == jeton and 
                grille[lig+3][col+3] == jeton):
                return True

    # Vérification diagonale descendante
    for col in range(NB_COLONNES - 3):
        for lig in range(3, NB_LIGNES):
            if (grille[lig][col] == jeton and 
                grille[lig-1][col+1] == jeton and 
                grille[lig-2][col+2] == jeton and 
                grille[lig-3][col+3] == jeton):
                return True
    
    return False

def coup_ia(grille, jeton_ia):
    colonnes_valides = [col for col in range(NB_COLONNES) if colonne_disponible(grille, col)]
    
    # Vérifier si l'IA peut gagner
    for col in colonnes_valides:
        grille_ia = grille.copy()
        ligne = obtenir_ligne_disponible(grille_ia, col)
        deposer_jeton(grille_ia, ligne, col, jeton_ia)
        if detecter_victoire(grille_ia, jeton_ia):
            return col
    
    # Vérifier si le joueur peut gagner au prochain coup
    jeton_joueur = 1 if jeton_ia == 2 else 2
    for col in colonnes_valides:
        grille_ia = grille.copy()
        ligne = obtenir_ligne_disponible(grille_ia, col)
        deposer_jeton(grille_ia, ligne, col, jeton_joueur)
        if detecter_victoire(grille_ia, jeton_joueur):
            return col
    
    # Choisir une colonne aléatoire parmi les valides
    return random.choice(colonnes_valides)

def afficher_grille_graphique(grille, surface, pion_anim=None):
    surface.fill(Noir)
    
    plateau = pygame.Surface((largeur_fenetre, hauteur_fenetre - DIMENSION_CASE))
    plateau.fill(Bleu)
    
    for col in range(NB_COLONNES):
        for lig in range(NB_LIGNES):
            centre_x = col * DIMENSION_CASE + DIMENSION_CASE // 2
            centre_y = lig * DIMENSION_CASE + DIMENSION_CASE // 2
            pygame.draw.circle(plateau, Noir, (centre_x, centre_y), TAILLE_PION)
    
    surface.blit(plateau, (0, DIMENSION_CASE))
    
    for col in range(NB_COLONNES):
        for lig in range(NB_LIGNES):
            if grille[lig][col] != 0:
                centre_x = col * DIMENSION_CASE + DIMENSION_CASE // 2
                centre_y = hauteur_fenetre - (lig * DIMENSION_CASE + DIMENSION_CASE // 2)
                
                if grille[lig][col] == 1:
                    pygame.draw.circle(surface, Rouge, (centre_x, centre_y), TAILLE_PION)
                elif grille[lig][col] == 2:
                    pygame.draw.circle(surface, Jaune, (centre_x, centre_y), TAILLE_PION)
    
    if pion_anim:
        pygame.draw.circle(surface, pion_anim['couleur'], 
                         (pion_anim['x'], pion_anim['y']), TAILLE_PION)
    
    pygame.display.update()

def animer_chute(ecran, grille, colonne, couleur_joueur):
    ligne = obtenir_ligne_disponible(grille, colonne)
    if ligne is None:
        return

    x = colonne * DIMENSION_CASE + DIMENSION_CASE // 2
    y = DIMENSION_CASE // 2
    y_final = hauteur_fenetre - (ligne * DIMENSION_CASE + DIMENSION_CASE // 2)
    
    vitesse = 0
    gravite = 1.5
    temps_debut = time.time()
    
    while y < y_final:
        pygame.draw.rect(ecran, Noir, (0, 0, largeur_fenetre, hauteur_fenetre))
        
        temps_ecoule = time.time() - temps_debut
        vitesse += gravite
        y = min(y + vitesse, y_final)
    
        pion_anim = {'x': x, 'y': y, 'couleur': couleur_joueur}
        afficher_grille_graphique(grille, ecran, pion_anim)
    
        pygame.time.delay(16)
        
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
                
        if y_final - y < 50:
            vitesse *= 0.8

def creer_bouton(surface, texte, position, dimensions, couleur, couleur_texte, police):
    x, y = position
    largeur, hauteur = dimensions
    
    pygame.draw.rect(surface, couleur, (x, y, largeur, hauteur))
    pygame.draw.rect(surface, Noir, (x, y, largeur, hauteur), 2)

    texte_rendu = police.render(texte, True, couleur_texte)
    texte_rect = texte_rendu.get_rect(center=(x + largeur // 2, y + hauteur // 2))
    surface.blit(texte_rendu, texte_rect)

    return pygame.Rect(x, y, largeur, hauteur)

def afficher_menu_fin(ecran, gagnant):
    largeur_bouton = 300
    hauteur_bouton = 60
    espacement = 20
    
    police_titre = pygame.font.SysFont("Arial", 48, bold=True)
    police_bouton = pygame.font.SysFont("Arial", 30)
    
    couleur_gagnant = Rouge if gagnant == 1 else Jaune
    
    overlay = pygame.Surface((largeur_fenetre, hauteur_fenetre))
    overlay.set_alpha(200)
    overlay.fill(Noir)
    ecran.blit(overlay, (0, 0))
    
    message = "Le Rouge gagne!" if gagnant == 1 else "Le Jaune gagne!"
    texte_gagnant = police_titre.render(message, True, couleur_gagnant)
    rect_titre = texte_gagnant.get_rect(center=(largeur_fenetre // 2, 100))
    ecran.blit(texte_gagnant, rect_titre)
    
    centre_x = largeur_fenetre // 2 - largeur_bouton // 2
    y_actuel = 200
    
    bouton_rejouer = creer_bouton(ecran, "Rejouer", 
                               (centre_x, y_actuel), 
                               (largeur_bouton, hauteur_bouton), 
                               Vert, Blanc, police_bouton)
    
    y_actuel += hauteur_bouton + espacement
    bouton_menu = creer_bouton(ecran, "Menu Principal", 
                           (centre_x, y_actuel), 
                           (largeur_bouton, hauteur_bouton), 
                           Bleu, Blanc, police_bouton)
    
    y_actuel += hauteur_bouton + espacement
    bouton_quitter = creer_bouton(ecran, "Quitter", 
                               (centre_x, y_actuel), 
                               (largeur_bouton, hauteur_bouton), 
                               Rouge, Blanc, police_bouton)

    pygame.display.update()
    
    while True:
        for evenement in pygame.event.get():
            if evenement.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
                
            if evenement.type == pygame.MOUSEBUTTONDOWN:
                position_souris = pygame.mouse.get_pos()
                
                if bouton_rejouer.collidepoint(position_souris):
                    return "rejouer"
                    
                elif bouton_menu.collidepoint(position_souris):
                    return "menu"
                    
                elif bouton_quitter.collidepoint(position_souris):
                    pygame.quit()
                    sys.exit()

def menu_principal():
    pygame.init()
    ecran = pygame.display.set_mode(dimensions)
    pygame.display.set_caption('Puissance 4 TD-02')
    
    police_titre = pygame.font.SysFont("Arial", 60, bold=True)
    police_bouton = pygame.font.SysFont("Arial", 36)
    
    largeur_bouton = 300
    hauteur_bouton = 80
    espacement = 40
    centre_x = largeur_fenetre // 2 - largeur_bouton // 2

    while True:
        ecran.fill(Noir)
        
        titre = police_titre.render("PUISSANCE 4", True, Blanc)
        rect_titre = titre.get_rect(center=(largeur_fenetre // 2, 120))
        ecran.blit(titre, rect_titre)

        y_actuel = 250
        
        bouton_jvsj = creer_bouton(ecran, "Joueur vs Joueur", 
                                 (centre_x, y_actuel), 
                                 (largeur_bouton, hauteur_bouton), 
                                 Vert, Blanc, police_bouton)
        
        y_actuel += hauteur_bouton + espacement
        
        bouton_jvsia = creer_bouton(ecran, "Joueur vs IA", 
                                 (centre_x, y_actuel), 
                                 (largeur_bouton, hauteur_bouton), 
                                 Bleu, Blanc, police_bouton)
        
        y_actuel += hauteur_bouton + espacement

        bouton_charger = creer_bouton(ecran, "Charger Partie", 
                                   (centre_x, y_actuel), 
                                   (largeur_bouton, hauteur_bouton), 
                                   Gris, Blanc, police_bouton)
        
        y_actuel += hauteur_bouton + espacement
     
        bouton_quitter = creer_bouton(ecran, "Quitter", 
                                   (centre_x, y_actuel), 
                                   (largeur_bouton, hauteur_bouton), 
                                   Rouge, Blanc, police_bouton)
        
        pygame.display.update()
        
        for evenement in pygame.event.get():
            if evenement.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
                
            if evenement.type == pygame.MOUSEBUTTONDOWN:
                pos = pygame.mouse.get_pos()
                
                if bouton_jvsj.collidepoint(pos):
                    return "jvsj", ecran 
                    
                elif bouton_jvsia.collidepoint(pos):
                    return "jvsia", ecran 
                    
                elif bouton_charger.collidepoint(pos):
                    grille, joueur_actuel, coups_joues, mode_jeu = charger_partie()
                    return "charger", ecran, grille, joueur_actuel, coups_joues, mode_jeu
                    
                elif bouton_quitter.collidepoint(pos):
                    pygame.quit()
                    sys.exit()

def demarrer_jeu(ecran=None, grille_chargee=None, joueur_chargee=None, coups_joues_charges=None, mode_jeu="jvsj"):
    if grille_chargee is not None:
        grille = grille_chargee
        joueur_actuel = joueur_chargee
        coups_joues = coups_joues_charges
    else:
        grille = initialiser_grille()
        joueur_actuel = random.randint(0, 1)
        coups_joues = []

    position_souris_x = largeur_fenetre // 2
    fin_partie = False
    gagnant = None

    if ecran is None:
        pygame.init()
        ecran = pygame.display.set_mode(dimensions)
        pygame.display.set_caption('Puissance 4 TD-02')
    
    police_texte = pygame.font.SysFont("monospace", 75)

    afficher_grille_graphique(grille, ecran)

    while not fin_partie:
        if mode_jeu == "jvsia" and joueur_actuel == 1:
            pygame.time.delay(500)
            colonne = coup_ia(grille, 2)
            if colonne is not None:
                ligne = obtenir_ligne_disponible(grille, colonne)
                deposer_jeton(grille, ligne, colonne, 2)
                coups_joues.append((ligne, colonne))
                
                if detecter_victoire(grille, 2):
                    gagnant = 2
                    fin_partie = True
                
                joueur_actuel = 0
                afficher_grille_graphique(grille, ecran)
        
        for evenement in pygame.event.get():
            if evenement.type == pygame.QUIT:
                pygame.quit()
                sys.exit()

            if evenement.type == pygame.MOUSEMOTION:
                position_souris_x = evenement.pos[0]
                couleur_joueur = Rouge if joueur_actuel == 0 else Jaune
                
                pygame.draw.rect(ecran, Noir, (0, 0, largeur_fenetre, DIMENSION_CASE))
                pygame.draw.circle(ecran, couleur_joueur, 
                                 (position_souris_x, DIMENSION_CASE // 2), TAILLE_PION)
                pygame.display.update(pygame.Rect(0, 0, largeur_fenetre, DIMENSION_CASE))

            if evenement.type == pygame.MOUSEBUTTONDOWN and (mode_jeu == "jvsj" or (mode_jeu == "jvsia" and joueur_actuel == 0)):
                colonne = evenement.pos[0] // DIMENSION_CASE
                if 0 <= colonne < NB_COLONNES and colonne_disponible(grille, colonne):
                    ligne = obtenir_ligne_disponible(grille, colonne)
                    num_joueur = joueur_actuel + 1
                    couleur_joueur = Rouge if joueur_actuel == 0 else Jaune
                    
                    animer_chute(ecran, grille, colonne, couleur_joueur)
       
                    deposer_jeton(grille, ligne, colonne, num_joueur)
                    coups_joues.append((ligne, colonne))

                    if detecter_victoire(grille, num_joueur):
                        gagnant = num_joueur
                        fin_partie = True
                        break
                    
                    afficher_grille_console(grille)
                    afficher_grille_graphique(grille, ecran)
                    
                    joueur_actuel = (joueur_actuel + 1) % 2
                    
                    pygame.draw.rect(ecran, Noir, (0, 0, largeur_fenetre, DIMENSION_CASE))
                    couleur_joueur = Rouge if joueur_actuel == 0 else Jaune
                    pygame.draw.circle(ecran, couleur_joueur, 
                                     (position_souris_x, DIMENSION_CASE // 2), TAILLE_PION)
                    pygame.display.update()

            if evenement.type == pygame.KEYDOWN:
                if evenement.key == pygame.K_z:
                    if annuler_dernier_coup(grille, coups_joues):
                        joueur_actuel = (joueur_actuel - 1) % 2
                        afficher_grille_console(grille)
                        afficher_grille_graphique(grille, ecran)
      
                        pygame.draw.rect(ecran, Noir, (0, 0, largeur_fenetre, DIMENSION_CASE))
                        couleur_joueur = Rouge if joueur_actuel == 0 else Jaune
                        pygame.draw.circle(ecran, couleur_joueur, 
                                         (position_souris_x, DIMENSION_CASE // 2), TAILLE_PION)
                        pygame.display.update()
      
                elif evenement.key == pygame.K_s:
                    sauvegarder_partie(grille, joueur_actuel, coups_joues, mode_jeu)

                elif evenement.key == pygame.K_c:
                    grille, joueur_actuel, coups_joues, mode_jeu = charger_partie()
                    afficher_grille_console(grille)
                    afficher_grille_graphique(grille, ecran)
      
                    pygame.draw.rect(ecran, Noir, (0, 0, largeur_fenetre, DIMENSION_CASE))
                    couleur_joueur = Rouge if joueur_actuel == 0 else Jaune
                    pygame.draw.circle(ecran, couleur_joueur, 
                                     (position_souris_x, DIMENSION_CASE // 2), TAILLE_PION)
                    pygame.display.update()
                    
    if gagnant:
        choix = afficher_menu_fin(ecran, gagnant)
        
        if choix == "rejouer":
            return demarrer_jeu(ecran, None, None, None, mode_jeu)
        elif choix == "menu":
            return menu_principal()

def charger_partie():
    try:
        with open("sauvegarde.pkl", "rb") as fichier:
            grille, joueur_actuel, coups_joues, mode_jeu = pickle.load(fichier)
        return grille, joueur_actuel, coups_joues, mode_jeu
    except FileNotFoundError:
        print("Aucune partie sauvegardée trouvée.")
        return initialiser_grille(), 0, [], "jvsj"

def sauvegarder_partie(grille, joueur_actuel, coups_joues, mode_jeu):
    with open("sauvegarde.pkl", "wb") as fichier:
        pickle.dump((grille, joueur_actuel, coups_joues, mode_jeu), fichier)

def help():
    aide = {
        "initialiser_grille": "Crée une grille vide 6x7 pour débuter le jeu.",
        "deposer_jeton": "Place le jeton du joueur à la position spécifiée.",
        "colonne_disponible": "Vérifie si une colonne n'est pas pleine.",
        "obtenir_ligne_disponible": "Retourne la première ligne vide d'une colonne.",
        "afficher_grille_console": "Affiche la grille dans la console (utile pour debug).",
        "detecter_victoire": "Détecte si un joueur a gagné (alignement horizontal, vertical ou diagonal).",
        "coup_ia": "Détermine le coup de l'IA : gagne si possible, sinon bloque, sinon joue aléatoirement.",
        "afficher_grille_graphique": "Affiche la grille avec les pions à l'écran (Pygame).",
        "animer_chute": "Anime la chute d'un pion dans une colonne avec un effet de gravité.",
        "creer_bouton": "Dessine un bouton interactif avec du texte centré.",
        "afficher_menu_fin": "Affiche le menu de fin avec options : rejouer, menu principal, quitter.",
        "menu_principal": "Affiche le menu de démarrage avec choix de mode de jeu.",
        "demarrer_jeu": "Lance une partie en mode choisi (Joueur vs Joueur ou Joueur vs IA).",
        "sauvegarder_partie": "Sauvegarde l'état du jeu dans un fichier local.",
        "charger_partie": "Charge une partie depuis un fichier local.",
        "help": "Affiche cette aide détaillée."
    }
    for nom, description in aide.items():
        print(f"{nom}(): {description}")


def annuler_dernier_coup(grille, coups_joues):
    if not coups_joues:
        return False
    ligne, colonne = coups_joues.pop()
    grille[ligne][colonne] = 0
    return True

def main():
    while True:
        resultat = menu_principal()
        
        if resultat[0] == "jvsj":
            ecran = resultat[1]
            demarrer_jeu(ecran, None, None, None, "jvsj")
        elif resultat[0] == "jvsia":
            ecran = resultat[1]
            demarrer_jeu(ecran, None, None, None, "jvsia")
        elif resultat[0] == "charger":
            ecran = resultat[1]
            grille = resultat[2]
            joueur_actuel = resultat[3]
            coups_joues = resultat[4]
            mode_jeu = resultat[5]
            demarrer_jeu(ecran, grille, joueur_actuel, coups_joues, mode_jeu)

if __name__ == "__main__":
    help()
    main()
